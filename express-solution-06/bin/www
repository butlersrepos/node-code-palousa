#!/usr/bin/env node

/** Module dependencies. */
var app = require( '../app' ).app;
var server = require( '../app' ).server;
var debug = require( 'debug' )( 'node-presentation:server' );

/** Get port from environment and store in Express. */
var port = normalizePort( process.env.PORT || '3000' );
app.set( 'port', port );

var io = require( '../app' ).io;

/** Listen on provided port, on all network interfaces. */
server.listen( port );
server.on( 'error', onError );
server.on( 'listening', onListening );

/** Normalize a port into a number, string, or false. */
function normalizePort( val ) {
	var port = parseInt( val, 10 );

	if( isNaN( port ) ) {
		// named pipe
		return val;
	}

	if( port >= 0 ) {
		// port number
		return port;
	}

	return false;
}

/** Event listener for HTTP server "error" event. */
function onError( error ) {
	if( error.syscall !== 'listen' ) {
		throw error;
	}

	var bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port

	// handle specific listen errors with friendly messages
	switch( error.code ) {
		case 'EACCES':
			console.error( bind + ' requires elevated privileges' );
			process.exit( 1 );
			break;
		case 'EADDRINUSE':
			console.error( bind + ' is already in use' );
			process.exit( 1 );
			break;
		default:
			throw error;
	}
}

/** Event listener for HTTP server "listening" event. */
function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	debug( 'Listening on ' + bind );
}

setInterval( function() {
	// Gather ids
	var ids = [];
	for( var id in io.to( 'my room' ).connected ) {
		if( io.to( 'my room' ).connected.hasOwnProperty( id ) ) {
			var thisSocket = io.to( 'my room' ).connected[id];
			var thisClient = thisSocket.client;
			if( thisClient.username ) {
				ids.push( thisClient.username );
			} else {
				ids.push( id );
			}
		}
	}
	io.to( 'my room' ).emit( 'people', {room: ids} );
}, 2000 );

io.on( 'connection', function( socket ) {
	// Place users into "my room" by default
	socket.join( 'my room' );
	// Fire news event immediately
	socket.emit( 'news', {hello: 'world'} );
	// Handle Events for this socket
	socket.on( 'my other event', function( data ) {
		console.log( data );
	} );
	socket.on( 'button event', function( data ) {
		console.log( "Apparently buttons=" + data.buttons );
		var d = new Date();
		setTimeout( function() {
			io.emit( 'broadcast', {msg: 'Someone pressed the button at: ' + d} );
		}, 2000 );
	} );
	socket.on( 'login', function( data ) {
		console.log( "Received login with name = " + data.name );
		socket.client.username = data.name;
	} );
} );
